#!/usr/bin/env bash
#
# mfinfo
#
# Provide the following info about the working directory:
#
#   - Remote (upstream) Org name (MarlinFirmware)
#   - Remote (origin) Org name (your Github username)
#   - Repo Name (Marlin, MarlinDocumentation)
#   - PR Target branch (bugfix-1.1.x, bugfix-2.0.x, dev-2.1.x, etc.)
#   - Branch Arg (the branch argument or current branch)
#   - Current Branch
#

CURR=$(git branch 2>/dev/null | grep ^* | sed 's/\* //g')
[[ -z $CURR ]] && { echo "No git repository here!" 1>&2 ; exit 1; }
[[ $CURR == "(no"* ]] && { echo "Git is busy with merge, rebase, etc." 1>&2 ; exit 1; }

REPO=$(git remote get-url upstream 2>/dev/null | sed -E 's/.*\/(.*)\.git/\1/')
[[ -z $REPO ]] && { echo "`basename $0`: No 'upstream' remote found. (Did you run mfinit?)" 1>&2 ; exit 1; }

ORG=$(git remote get-url upstream 2>/dev/null | sed -E 's/.*[\/:](.*)\/.*$/\1/')
[[ $ORG == MarlinFirmware ]] || { echo "`basename $0`: Not a Marlin repository." 1>&2 ; exit 1; }

FORK=$(git remote get-url origin 2>/dev/null | sed -E 's/.*[\/:](.*)\/.*$/\1/')

# Defaults if no arguments given
BRANCH=$CURR
INDEX=1

while [[ $# -gt 0 ]]; do
  opt="$1" ; shift ; val="$1"

  IFS='=' read -a PARTS <<<"$opt"
  [[ "${PARTS[1]}" != "" ]] && { EQUALS=1 ; opt="${PARTS[0]}" ; val="${PARTS[1]}" ; }

  GOODVAL=1
  if [[ "$val" =~ ^-{1,2}.* || ! "$opt" =~ ^-{1,2}.* ]]; then
    GOODVAL=0
    val=""
  fi

  case "$opt" in
    -*|--*) MORE="$MORE$opt " ; [[ $EQUALS == 1 ]] && MORE="$MORE=$val" ;;
     1|2|3) INDEX=$opt ;;
         *) BRANCH="$opt" ;;
  esac

done

case "$REPO" in
  Marlin              ) TARG=bugfix-2.0.x ; [[ $INDEX == 1 ]] && TARG=bugfix-1.1.x ; [[ $INDEX == 3 ]] && TARG=dev-2.1.x ;;
  Configurations      ) TARG=import-2.0.x ;;
  MarlinDocumentation ) TARG=master ;;
esac

[[ $BRANCH =~ ^[123]$ ]] && USAGE=1

[[ $USAGE == 1 ]] && { echo "usage: `basename $0` [1|2|3] [branch]" 1>&2 ; exit 1 ; }

echo "$ORG $FORK $REPO $TARG $BRANCH $CURR $MORE"
