#!/usr/bin/env bash
#
# build_all_examples
#

GITREPO=https://github.com/MarlinFirmware/Configurations.git

# Check dependencies
which curl 1>/dev/null 2>&1 || { echo "curl not found! Please install it."; exit ; }
which git 1>/dev/null 2>&1 || { echo "git not found! Please install it."; exit ; }

SED=$(command -v gsed 2>/dev/null || command -v sed 2>/dev/null)
[[ -z $SED ]] && { echo "No sed found, please install sed" ; exit 1 ; }

# Check if called in the right location
if [[ ! -e "Marlin/src" ]]; then
  echo "This script must be called from a Marlin working copy with:"
  echo " ./buildroot/bin/$self $1"
  exit
fi

self=`basename "$0"`
HERE=`dirname "$0"`

if [[ $# -lt 1 || $# -gt 2 ]]; then
  echo "
  Usage: $self base_branch [resume_point]
         base_branch    Configuration branch to download and build
         resume_point   Configuration path to start from"
  exit
fi

echo "This script downloads all Configurations and builds Marlin with each one."
echo "On failure the last-built configs will be left in your working copy."
echo "Restore your configs with 'git checkout -f' or 'git reset --hard HEAD'."

# Check if the current repository has unmerged changes
if [[ -z $2 ]]; then
  git diff --quiet || { echo "Your current repository is not clean. Either commit your change or stash them, and re-run this script"; exit ; }
else
  echo "Resuming from $2"
fi

# Get previous build state, if any.
mkdir -p ./.pio
BUILD_STATE="./.pio/.buildall"
[[ -f "$BUILD_STATE" ]] && read MFTEMP <"$BUILD_STATE"

# Create a temporary folder if needed
[[ -d $MFTEMP ]] || MFTEMP=$(mktemp -d)

# Download Configurations into the temporary folder
if [[ ! -e "$MFTEMP/README.md" ]]; then
  echo "Downloading Configurations from GitHub into $MFTEMP"
  git clone --depth=1 --single-branch --branch "$1" $GITREPO "$MFTEMP" || { echo "Failed to clone the configuration repository"; exit ; }
else
  echo "Using previously downloaded Configurations at $MFTEMP"
fi

echo "$MFTEMP" >"$BUILD_STATE"

echo -e "Start building now...\n====================="
FIRST_CONF=$2
shopt -s nullglob
IFS='
'
CONF_TREE=$( ls -d "$MFTEMP"/config/examples/*/ "$MFTEMP"/config/examples/*/*/ "$MFTEMP"/config/examples/*/*/*/ "$MFTEMP"/config/examples/*/*/*/*/ | grep -vE ".+\.(\w+)$" )

for CONF in $CONF_TREE ; do
  DIR=$( echo $CONF | sed "s|$MFTEMP/config/examples/||" )
  echo -n "$DIR:"
  [[ ! -z $FIRST_CONF ]] && [[ $FIRST_CONF != $DIR && "$FIRST_CONF/" != $DIR ]] && { echo " Skipping" ; continue ; }
  unset FIRST_CONF
  compgen -G "${CONF}Con*.h" > /dev/null || continue
  echo
  "$HERE/build_example" "internal" "$MFTEMP" "$DIR" || { echo "Failed to build $DIR"; exit ; }
done

# Delete the temp folder and build state
rm -rf "$MFTEMP"
rm "$BUILD_STATE"
